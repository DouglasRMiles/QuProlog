#line 2 "lexer.cc"

#line 4 "lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 114
#define YY_END_OF_BUFFER 115
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[731] =
    {   0,
        0,    0,  115,  113,   95,   95,   98,  113,  113,   99,
      109,  110,  112,  106,  111,  103,  105,  107,  108,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,   95,  104,    0,   96,   97,    0,  103,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  101,    0,  102,    0,    0,    0,   84,    0,
      100,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   78,    0,    0,    0,
        0,    0,    0,    0,   74,   72,    0,   73,   70,    0,

       69,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  101,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   79,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   80,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   71,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   61,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   29,    0,    0,    0,    0,    0,    0,
        0,    0,   81,    0,    0,    0,    0,    0,    9,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   59,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   62,    0,    0,    0,
        0,   27,    0,   28,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    7,    0,    0,    0,    8,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   57,    0,    0,   58,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   46,
        0,    0,    0,    0,    0,   65,    0,    0,    0,    0,
        0,    0,   26,    0,   82,    0,   23,    0,   83,    0,
       24,    0,    0,    0,    0,    6,    0,    0,    0,    0,
        0,    3,    0,    0,    0,    4,    0,    0,    0,   56,
        0,    0,   49,    0,    0,   50,    0,    0,    0,    0,
        0,    0,   75,    0,    0,    0,    0,   38,    0,    0,
       39,    0,    0,   64,    0,   16,    0,    0,    0,   25,
        0,    0,    0,    0,    0,    0,    5,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,   55,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       44,    0,   45,    0,    0,    0,    0,    0,    0,    0,
        0,   30,    0,    0,    0,    0,   89,   90,   91,   92,
       93,   94,    0,    0,   10,    0,    0,    0,    0,    0,
        0,    0,   76,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   43,   40,    0,   41,    0,   63,
        0,   68,    0,    0,    0,   21,    0,   22,    0,   15,
        0,    0,    0,    1,    0,    0,    2,    0,    0,   47,
        0,   48,    0,    0,    0,   85,    0,   42,    0,    0,

       67,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   60,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   17,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   36,   37,   66,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   34,    0,   35,    0,
        0,   13,    0,    0,   14,    0,    0,   53,    0,   54,
        0,   86,    0,    0,   77,   31,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   87,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   88,   32,   33,    0,
       11,    0,   12,    0,   51,   52,    0,    0,    0,    0,
       18,   19,    0,    0,    0,    0,    0,    0,   20,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    5,    6,    1,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   22,   22,   22,   23,    1,    1,
        1,    1,    1,    1,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       25,    1,   26,    1,   27,    1,   28,   29,   30,   31,

       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   24,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[53] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    1,    2,    3,    1,    4,    4,    4,    4,    4,
        4,    4,    1,    5,    1,    1,    5,    5,    5,    5,
        5,    6,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5
    } ;

static yyconst flex_int16_t yy_base[737] =
    {   0,
        0,    0,  806,  807,   51,   53,  807,    0,  802,  807,
      807,  807,  807,  807,  794,   43,  807,  807,  807,  764,
       30,  770,   18,  773,  768,  771,  750,   28,   16,  765,
       31,  751,  754,   64,    0,  791,  807,  807,   66,   57,
       61,  754,  753,  759,  743,  761,  757,   41,  751,  739,
      746,  744,  753,  740,  739,  748,  732,  731,  730,  740,
       28,  739,  742,   74,   81,  731,  733,  741,  807,  731,
      807,  739,  721,  728,  739,  718,  721,  725,  719,  731,
      712,  732,  713,  730,  709,  709,  727,  720,   93,  722,
      724,  712,  710,  700,  807,  807,   77,  807,  807,  720,

      807,  714,  714,  100,  692,  123,  713,  695,  701,  688,
      160,  167,  711,   77,  711,  695,  689,  693,  692,  692,
      696,  684,  703,  702,  698,  695,  684,  683,  682,  682,
      686,  673,   63,  693,  692,  691,  675,  674,  674,  685,
      666,  670,  684,  683,  674,  681,  675,  679,  658,  673,
      657,  657,  672,  670,  667,  657,  649,  649,  649,  649,
       73,   75,  645,  661,  664,  649,  641,   32,  642,  659,
      641,  656,   85,   91,  644,  642,  634,  634,  643,  634,
      642,   76,   77,  650,  636,  648,  111,  642,  642,  642,
      639,  634,  641,  641,  621,  637,  633,  617,  101,  631,

      633,  633,  628,  630,  630,  610,  807,  620,  609,  625,
      606,  620,  604,  609,  107,  603,  619,  615,  618,  616,
      612,  615,  610,  595,  611,  607,  606,  601,  605,  606,
      606,  604,  604,  589,  598,  597,  586,  585,  585,  578,
      582,  596,  595,  807,  576,  592,  588,  577,  570,  162,
      569,  576,  580,  807,  572,  582,  562,  573,  111,  560,
      571,  119,  807,  566,  559,  566,  568,  569,  807,  555,
      560,  570,  552,  561,  552,  122,  559,  550,  152,  567,
      546,  553,  557,  560,  548,  807,  551,  153,  550,  154,
      545,  558,  545,  542,  534,  534,  535,  543,  121,  151,

      546,  534,  540,  544,  542,  542,  526,  526,  542,  537,
      536,  533,  519,  533,  532,  515,  526,  529,  528,  511,
      522,  511,  528,  523,  526,  521,  516,  517,  503,  513,
      516,  507,  498,  509,  512,  503,  494,  505,  508,  511,
      506,  505,  489,  501,  502,  485,  496,  499,  482,  493,
      501,  495,  480,  479,  495,  491,  486,  490,  488,  491,
      486,  489,  470,  483,  484,  481,  807,  481,  481,  478,
      468,  807,  463,  807,  459,  467,  475,  472,  475,  463,
      471,  468,  471,  451,  456,  807,  457,  450,  461,  807,
      445,  445,  461,  463,  457,  460,  457,  459,  453,  456,

      444,  441,  807,  436,  453,  807,  449,  446,  449,  446,
      443,  446,  165,  434,  440,  424,  431,  435,  427,  807,
      434,  162,  433,  163,  419,  807,  436,  418,  417,  433,
      429,  412,  807,  413,  807,  410,  807,  427,  807,  408,
      807,  425,  408,  405,  424,  807,  414,  404,  400,  400,
      400,  807,  416,  397,  397,  807,  413,  395,  393,  807,
      390,  391,  807,  408,  389,  807,  406,  392,  385,  385,
      399,  384,  807,  401,  396,  395,  392,  807,  377,  388,
      807,  375,  386,  807,  374,  807,  388,  376,  382,  807,
      385,  389,  376,  387,  374,  197,  807,  380,  379,  378,

      362,  381,  359,  367,  378,  356,  364,  370,  807,  359,
      373,  360,  371,  358,  355,  367,  349,  348,  360,  350,
      807,  345,  807,  357,  360,  355,  358,  353,  338,  351,
      352,  354,  331,  347,  329,  345,  807,  807,  807,  807,
      807,  807,  336,  330,  807,  338,  324,  343,  339,  321,
      340,  336,  807,  331,  317,  333,  315,  331,  316,  320,
      312,  319,  331,  310,  807,  807,  327,  807,  326,  807,
      308,  807,  325,  319,  323,  807,  322,  807,  306,  807,
      306,  319,  300,  807,  317,  298,  807,  312,  314,  807,
      313,  807,  293,  292,  308,  807,  304,  807,  297,  296,

      807,  287,  288,  165,  180,  285,  290,  181,  283,  182,
      282,  807,  183,  184,  300,  291,  279,  297,  292,  291,
      290,  293,  272,  283,  270,  281,  264,  807,  267,  278,
      277,  264,  274,  271,  256,  265,   73,   99,  104,  115,
      120,  135,  807,  807,  807,  133,  171,  178,  192,  202,
      204,  200,  205,  187,  203,  208,  190,  206,  211,  208,
      213,  195,  207,  199,  206,  214,  807,  218,  807,  219,
      203,  807,  221,  203,  807,  223,  205,  807,  225,  807,
      226,  807,  224,  225,  807,  807,  219,  220,  212,  222,
      215,  224,  217,  226,  227,  222,  807,  236,  237,  241,

      239,  236,  241,  238,  243,  244,  807,  807,  807,  231,
      807,  236,  807,  237,  807,  807,  233,  240,  241,  247,
      807,  807,  237,  237,  239,  251,  246,  248,  807,  807,
      286,  292,  296,  301,  302,  307
    } ;

static yyconst flex_int16_t yy_def[737] =
    {   0,
      730,    1,  730,  730,  730,  730,  730,  731,  732,  730,
      730,  730,  730,  730,  730,  733,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  731,  732,  730,  730,  730,  733,
      734,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  735,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  736,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,

      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,

      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,

      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,

      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,

      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,

      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,

      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,    0,
      730,  730,  730,  730,  730,  730
    } ;

static yyconst flex_int16_t yy_nxt[860] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,    4,
        4,   13,   14,    4,   15,   16,   16,   16,   16,   16,
       16,   16,   17,    4,   18,   19,    4,   20,    4,   21,
       22,   23,   24,   25,   26,    4,   27,    4,    4,    4,
       28,    4,   29,    4,   30,   31,   32,   33,    4,    4,
        4,    4,   34,   34,   34,   34,   39,   43,   47,   53,
       55,   56,   59,   57,   44,   34,   34,  211,   48,   54,
       39,   64,   72,   64,   41,   86,   73,   45,  212,   87,
       60,   63,   63,   63,   63,   63,   63,   63,   41,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,  111,  150,  111,  118,  119,  151,  171,
      172,  200,  120,  203,  201,  121,  204,  230,  232,  152,
      660,  202,  122,  205,  231,  233,  217,  123,  124,  128,
      129,  218,  220,  219,  661,  130,  255,  221,  131,  222,
      237,  238,  271,  132,  662,  133,  239,  663,  256,  316,
      134,  135,  137,  138,  272,  317,  240,  320,  139,  241,
      333,  242,  243,  321,  140,  359,  334,  664,  141,  360,
      665,  142,  666,  143,  144,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  306,
      337,  346,  349,  307,  468,  361,  338,  347,  350,  362,

      479,  482,  667,  623,  308,  668,  480,  483,  469,  624,
      470,  471,  537,  538,  539,  540,  541,  542,  625,  629,
      632,  635,  637,  669,  626,  630,  633,  636,  638,  670,
      671,  672,  673,  674,  675,  676,  677,  678,  679,  680,
      681,  682,  683,  684,  685,  686,  687,  688,  689,  690,
      691,  692,  693,  694,  695,  696,  697,  698,  699,  700,
      701,  702,  703,  704,  705,  706,  707,  708,  709,  710,
      711,  712,  713,  714,  715,  716,  717,  718,  719,  720,
      721,  722,  723,  724,  725,  726,  727,  728,  729,   35,
       35,   35,   36,   36,   36,   36,   36,   36,   40,   40,

      659,   40,   65,  658,   65,   63,  657,   63,  112,  656,
      112,  655,  654,  653,  652,  651,  650,  649,  648,  647,
      646,  645,  644,  643,  642,  641,  640,  639,  634,  631,
      628,  627,  622,  621,  620,  619,  618,  617,  616,  615,
      614,  613,  612,  611,  610,  609,  608,  607,  606,  605,
      604,  603,  602,  601,  600,  599,  598,  597,  596,  595,
      594,  593,  592,  591,  590,  589,  588,  587,  586,  585,
      584,  583,  582,  581,  580,  579,  578,  577,  576,  575,
      574,  573,  572,  571,  570,  569,  568,  567,  566,  565,
      564,  563,  562,  561,  560,  559,  558,  557,  556,  555,

      554,  553,  552,  551,  550,  549,  548,  547,  546,  545,
      544,  543,  536,  535,  534,  533,  532,  531,  530,  529,
      528,  527,  526,  525,  524,  523,  522,  521,  520,  519,
      518,  517,  516,  515,  514,  513,  512,  511,  510,  509,
      508,  507,  506,  505,  504,  503,  502,  501,  500,  499,
      498,  497,  496,  495,  494,  493,  492,  491,  490,  489,
      488,  487,  486,  485,  484,  481,  478,  477,  476,  475,
      474,  473,  472,  467,  466,  465,  464,  463,  462,  461,
      460,  459,  458,  457,  456,  455,  454,  453,  452,  451,
      450,  449,  448,  447,  446,  445,  444,  443,  442,  441,

      440,  439,  438,  437,  436,  435,  434,  433,  432,  431,
      430,  429,  428,  427,  426,  425,  424,  423,  422,  421,
      420,  419,  418,  417,  416,  415,  414,  413,  412,  411,
      410,  409,  408,  407,  406,  405,  404,  403,  402,  401,
      400,  399,  398,  397,  396,  395,  394,  393,  392,  391,
      390,  389,  388,  387,  386,  385,  384,  383,  382,  381,
      380,  379,  378,  377,  376,  375,  374,  373,  372,  371,
      370,  369,  368,  367,  366,  365,  364,  363,  358,  357,
      356,  355,  354,  353,  352,  351,  348,  345,  344,  343,
      342,  341,  340,  339,  336,  335,  332,  331,  330,  329,

      328,  327,  326,  325,  324,  323,  322,  319,  318,  315,
      314,  313,  312,  311,  310,  309,  305,  304,  303,  302,
      301,  300,  299,  298,  297,  296,  295,  294,  293,  292,
      291,  290,  289,  288,  287,  286,  285,  284,  283,  282,
      281,  280,  279,  278,  277,  276,  275,  274,  273,  270,
      269,  268,  267,  266,  265,  264,  263,  262,  261,  260,
      259,  258,  257,  254,  253,  252,  251,  250,  249,  248,
      247,  246,  245,  244,  236,  235,  234,  229,  228,  227,
      226,  225,  224,  223,  216,  215,  214,  213,  210,  209,
      208,  207,  206,  199,  198,  197,  196,  195,  194,  193,

      192,  191,  190,  189,  188,  187,  186,  185,  184,  183,
      182,  181,  180,  179,  178,  177,  176,  175,  174,  173,
      170,  169,  168,  167,  166,  165,  164,  163,  162,  161,
      160,  159,  158,  157,  156,  155,  154,  153,  149,  148,
      147,  146,  145,  136,  127,  126,  125,  117,  116,  115,
      114,  113,  110,  109,  108,  107,  106,  105,  104,  103,
      102,  101,  100,   99,   98,   97,   96,   95,   94,   93,
       92,   91,   90,   89,   88,   85,   84,   83,   82,   81,
       80,   79,   78,   77,   76,   75,   74,   71,   70,   69,
       68,   67,   66,   37,   62,   61,   58,   52,   51,   50,

       49,   46,   42,   38,   37,  730,    3,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730
    } ;

static yyconst flex_int16_t yy_chk[860] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    5,    5,    6,    6,   16,   21,   23,   28,
       29,   29,   31,   29,   21,   34,   34,  168,   23,   28,
       40,   41,   48,   41,   16,   61,   48,   21,  168,   61,
       31,   39,   39,   39,   39,   39,   39,   39,   40,   64,
       64,   64,   64,   64,   64,   64,   65,   65,   65,   65,

       65,   65,   65,   89,  114,   89,   97,   97,  114,  133,
      133,  161,   97,  162,  161,   97,  162,  182,  183,  114,
      637,  161,   97,  162,  182,  183,  173,   97,   97,  104,
      104,  173,  174,  173,  638,  104,  199,  174,  104,  174,
      187,  187,  215,  104,  639,  104,  187,  640,  199,  259,
      104,  104,  106,  106,  215,  259,  187,  262,  106,  187,
      276,  187,  187,  262,  106,  299,  276,  641,  106,  299,
      642,  106,  646,  106,  106,  111,  111,  111,  111,  111,
      111,  111,  112,  112,  112,  112,  112,  112,  112,  250,
      279,  288,  290,  250,  413,  300,  279,  288,  290,  300,

      422,  424,  647,  604,  250,  648,  422,  424,  413,  604,
      413,  413,  496,  496,  496,  496,  496,  496,  605,  608,
      610,  613,  614,  649,  605,  608,  610,  613,  614,  650,
      651,  652,  653,  654,  655,  656,  657,  658,  659,  660,
      661,  662,  663,  664,  665,  666,  668,  670,  671,  673,
      674,  676,  677,  679,  681,  683,  684,  687,  688,  689,
      690,  691,  692,  693,  694,  695,  696,  698,  699,  700,
      701,  702,  703,  704,  705,  706,  710,  712,  714,  717,
      718,  719,  720,  723,  724,  725,  726,  727,  728,  731,
      731,  731,  732,  732,  732,  732,  732,  732,  733,  733,

      636,  733,  734,  635,  734,  735,  634,  735,  736,  633,
      736,  632,  631,  630,  629,  627,  626,  625,  624,  623,
      622,  621,  620,  619,  618,  617,  616,  615,  611,  609,
      607,  606,  603,  602,  600,  599,  597,  595,  594,  593,
      591,  589,  588,  586,  585,  583,  582,  581,  579,  577,
      575,  574,  573,  571,  569,  567,  564,  563,  562,  561,
      560,  559,  558,  557,  556,  555,  554,  552,  551,  550,
      549,  548,  547,  546,  544,  543,  536,  535,  534,  533,
      532,  531,  530,  529,  528,  527,  526,  525,  524,  522,
      520,  519,  518,  517,  516,  515,  514,  513,  512,  511,

      510,  508,  507,  506,  505,  504,  503,  502,  501,  500,
      499,  498,  495,  494,  493,  492,  491,  489,  488,  487,
      485,  483,  482,  480,  479,  477,  476,  475,  474,  472,
      471,  470,  469,  468,  467,  465,  464,  462,  461,  459,
      458,  457,  455,  454,  453,  451,  450,  449,  448,  447,
      445,  444,  443,  442,  440,  438,  436,  434,  432,  431,
      430,  429,  428,  427,  425,  423,  421,  419,  418,  417,
      416,  415,  414,  412,  411,  410,  409,  408,  407,  405,
      404,  402,  401,  400,  399,  398,  397,  396,  395,  394,
      393,  392,  391,  389,  388,  387,  385,  384,  383,  382,

      381,  380,  379,  378,  377,  376,  375,  373,  371,  370,
      369,  368,  366,  365,  364,  363,  362,  361,  360,  359,
      358,  357,  356,  355,  354,  353,  352,  351,  350,  349,
      348,  347,  346,  345,  344,  343,  342,  341,  340,  339,
      338,  337,  336,  335,  334,  333,  332,  331,  330,  329,
      328,  327,  326,  325,  324,  323,  322,  321,  320,  319,
      318,  317,  316,  315,  314,  313,  312,  311,  310,  309,
      308,  307,  306,  305,  304,  303,  302,  301,  298,  297,
      296,  295,  294,  293,  292,  291,  289,  287,  285,  284,
      283,  282,  281,  280,  278,  277,  275,  274,  273,  272,

      271,  270,  268,  267,  266,  265,  264,  261,  260,  258,
      257,  256,  255,  253,  252,  251,  249,  248,  247,  246,
      245,  243,  242,  241,  240,  239,  238,  237,  236,  235,
      234,  233,  232,  231,  230,  229,  228,  227,  226,  225,
      224,  223,  222,  221,  220,  219,  218,  217,  216,  214,
      213,  212,  211,  210,  209,  208,  206,  205,  204,  203,
      202,  201,  200,  198,  197,  196,  195,  194,  193,  192,
      191,  190,  189,  188,  186,  185,  184,  181,  180,  179,
      178,  177,  176,  175,  172,  171,  170,  169,  167,  166,
      165,  164,  163,  160,  159,  158,  157,  156,  155,  154,

      153,  152,  151,  150,  149,  148,  147,  146,  145,  144,
      143,  142,  141,  140,  139,  138,  137,  136,  135,  134,
      132,  131,  130,  129,  128,  127,  126,  125,  124,  123,
      122,  121,  120,  119,  118,  117,  116,  115,  113,  110,
      109,  108,  107,  105,  103,  102,  100,   94,   93,   92,
       91,   90,   88,   87,   86,   85,   84,   83,   82,   81,
       80,   79,   78,   77,   76,   75,   74,   73,   72,   70,
       68,   67,   66,   63,   62,   60,   59,   58,   57,   56,
       55,   54,   53,   52,   51,   50,   49,   47,   46,   45,
       44,   43,   42,   36,   33,   32,   30,   27,   26,   25,

       24,   22,   20,   15,    9,    3,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "qa.l"
#line 3 "qa.l"
/*
 * Copyright (C) 2000-Wednesday 16 May  13:50:25 AEST 2018 
 *
 * Department of Computer Science,
 * University of Queensland
 */

#include <iostream>
#include <stdio.h>

#include "asm_objects.h"
#include "errors.h"
#include "instructions.h"
#include <string.h>

#define RETURN_INSTR(opcode, token)					\
	do {								\
	  yylval.instruction =						\
            new ASMInt<Code::InstructionSizedType>(opcode);		\
									\
	  return token;							\
	} while (0)

void read_comment(void);

size_t read_atom(string&, const size_t);

#line 920 "lexer.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 31 "qa.l"

#line 1109 "lexer.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 731 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 807 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 32 "qa.l"
RETURN_INSTR(PUT_X_VARIABLE, put_x_variable);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 33 "qa.l"
RETURN_INSTR(PUT_Y_VARIABLE, put_y_variable);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 34 "qa.l"
RETURN_INSTR(PUT_X_VALUE, put_x_value);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 35 "qa.l"
RETURN_INSTR(PUT_Y_VALUE, put_y_value);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 36 "qa.l"
RETURN_INSTR(PUT_CONSTANT, put_constant);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 37 "qa.l"
RETURN_INSTR(PUT_INTEGER, put_integer);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 38 "qa.l"
RETURN_INSTR(PUT_DOUBLE, put_double);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 39 "qa.l"
RETURN_INSTR(PUT_STRING, put_string);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 40 "qa.l"
RETURN_INSTR(PUT_LIST, put_list); 
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 41 "qa.l"
RETURN_INSTR(PUT_STRUCTURE, put_structure);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 42 "qa.l"
RETURN_INSTR(PUT_X_OBJECT_VARIABLE, put_x_object_variable);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 43 "qa.l"
RETURN_INSTR(PUT_Y_OBJECT_VARIABLE, put_y_object_variable);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 44 "qa.l"
RETURN_INSTR(PUT_X_OBJECT_VALUE, put_x_object_value);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 45 "qa.l"
RETURN_INSTR(PUT_Y_OBJECT_VALUE, put_y_object_value);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 46 "qa.l"
RETURN_INSTR(PUT_QUANTIFIER, put_quantifier);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 47 "qa.l"
RETURN_INSTR(CHECK_BINDER, check_binder);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 48 "qa.l"
RETURN_INSTR(PUT_SUBSTITUTION, put_substitution);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 49 "qa.l"
RETURN_INSTR(PUT_X_TERM_SUBSTITUTION, put_x_term_substitution);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 50 "qa.l"
RETURN_INSTR(PUT_Y_TERM_SUBSTITUTION, put_y_term_substitution);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 51 "qa.l"
RETURN_INSTR(PUT_INITIAL_EMPTY_SUBSTITUTION, put_initial_empty_substitution);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 52 "qa.l"
RETURN_INSTR(GET_X_VARIABLE, get_x_variable);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 53 "qa.l"
RETURN_INSTR(GET_Y_VARIABLE, get_y_variable);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 54 "qa.l"
RETURN_INSTR(GET_X_VALUE, get_x_value);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 55 "qa.l"
RETURN_INSTR(GET_Y_VALUE, get_y_value);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 56 "qa.l"
RETURN_INSTR(GET_CONSTANT, get_constant);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 57 "qa.l"
RETURN_INSTR(GET_INTEGER, get_integer);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 58 "qa.l"
RETURN_INSTR(GET_DOUBLE, get_double);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 59 "qa.l"
RETURN_INSTR(GET_STRING, get_string);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 60 "qa.l"
RETURN_INSTR(GET_LIST, get_list);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 61 "qa.l"
RETURN_INSTR(GET_STRUCTURE, get_structure);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 62 "qa.l"
RETURN_INSTR(GET_STRUCTURE_FRAME, get_structure_frame);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 63 "qa.l"
RETURN_INSTR(GET_X_OBJECT_VARIABLE, get_x_object_variable);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 64 "qa.l"
RETURN_INSTR(GET_Y_OBJECT_VARIABLE, get_y_object_variable);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 65 "qa.l"
RETURN_INSTR(GET_X_OBJECT_VALUE, get_x_object_value);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 66 "qa.l"
RETURN_INSTR(GET_Y_OBJECT_VALUE, get_y_object_value);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 67 "qa.l"
RETURN_INSTR(UNIFY_X_VARIABLE, unify_x_variable);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 68 "qa.l"
RETURN_INSTR(UNIFY_Y_VARIABLE, unify_y_variable);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 69 "qa.l"
RETURN_INSTR(UNIFY_X_REF, unify_x_ref);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 70 "qa.l"
RETURN_INSTR(UNIFY_Y_REF, unify_y_ref);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 71 "qa.l"
RETURN_INSTR(UNIFY_X_VALUE, unify_x_value);	
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 72 "qa.l"
RETURN_INSTR(UNIFY_Y_VALUE, unify_y_value);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 73 "qa.l"
RETURN_INSTR(UNIFY_CONSTANT, unify_constant);		
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 74 "qa.l"
RETURN_INSTR(UNIFY_INTEGER, unify_integer);		
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 75 "qa.l"
RETURN_INSTR(UNIFY_DOUBLE, unify_double);		
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 76 "qa.l"
RETURN_INSTR(UNIFY_STRING, unify_string);		
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 77 "qa.l"
RETURN_INSTR(UNIFY_VOID, unify_void);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 78 "qa.l"
RETURN_INSTR(SET_X_VARIABLE, set_x_variable);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 79 "qa.l"
RETURN_INSTR(SET_Y_VARIABLE, set_y_variable);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 80 "qa.l"
RETURN_INSTR(SET_X_VALUE, set_x_value);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 81 "qa.l"
RETURN_INSTR(SET_Y_VALUE, set_y_value);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 82 "qa.l"
RETURN_INSTR(SET_X_OBJECT_VARIABLE, set_x_object_variable);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 83 "qa.l"
RETURN_INSTR(SET_Y_OBJECT_VARIABLE, set_y_object_variable);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 84 "qa.l"
RETURN_INSTR(SET_X_OBJECT_VALUE, set_x_object_value);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 85 "qa.l"
RETURN_INSTR(SET_Y_OBJECT_VALUE, set_y_object_value);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 86 "qa.l"
RETURN_INSTR(SET_CONSTANT, set_constant);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 87 "qa.l"
RETURN_INSTR(SET_INTEGER, set_integer);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 88 "qa.l"
RETURN_INSTR(SET_DOUBLE, set_double);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 89 "qa.l"
RETURN_INSTR(SET_STRING, set_string);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 90 "qa.l"
RETURN_INSTR(SET_VOID, set_void);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 91 "qa.l"
RETURN_INSTR(SET_OBJECT_VOID, set_object_void);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 92 "qa.l"
RETURN_INSTR(ALLOCATE, wam_allocate);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 93 "qa.l"
RETURN_INSTR(DEALLOCATE, wam_deallocate);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 94 "qa.l"
RETURN_INSTR(CALL_PREDICATE, call_predicate);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 95 "qa.l"
RETURN_INSTR(CALL_ADDRESS, call_address);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 96 "qa.l"
RETURN_INSTR(CALL_ESCAPE, call_escape);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 97 "qa.l"
RETURN_INSTR(EXECUTE_PREDICATE, execute_predicate);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 98 "qa.l"
RETURN_INSTR(EXECUTE_ADDRESS, execute_address);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 99 "qa.l"
RETURN_INSTR(EXECUTE_ESCAPE, execute_escape);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 100 "qa.l"
RETURN_INSTR(NOOP, noop);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 101 "qa.l"
RETURN_INSTR(JUMP, jump);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 102 "qa.l"
RETURN_INSTR(PROCEED, proceed);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 103 "qa.l"
RETURN_INSTR(FAIL, wam_fail);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 104 "qa.l"
RETURN_INSTR(HALT, halt);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 105 "qa.l"
RETURN_INSTR(EXIT, wam_exit);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 106 "qa.l"
RETURN_INSTR(TRY_ME_ELSE, try_me_else);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 107 "qa.l"
RETURN_INSTR(RETRY_ME_ELSE, retry_me_else);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 108 "qa.l"
RETURN_INSTR(TRUST_ME_ELSE_FAIL, trust_me_else_fail);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 109 "qa.l"
RETURN_INSTR(TRY, wam_try);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 110 "qa.l"
RETURN_INSTR(RETRY, retry);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 111 "qa.l"
RETURN_INSTR(TRUST, trust);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 112 "qa.l"
RETURN_INSTR(NECK_CUT, neck_cut);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 113 "qa.l"
RETURN_INSTR(GET_X_LEVEL, get_x_level);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 114 "qa.l"
RETURN_INSTR(GET_Y_LEVEL, get_y_level);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 115 "qa.l"
RETURN_INSTR(CUT, cut);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 116 "qa.l"
RETURN_INSTR(SWITCH_ON_TERM, switch_on_term);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 117 "qa.l"
RETURN_INSTR(SWITCH_ON_CONSTANT, switch_on_constant);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 118 "qa.l"
RETURN_INSTR(SWITCH_ON_STRUCTURE, switch_on_structure);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 119 "qa.l"
RETURN_INSTR(SWITCH_ON_QUANTIFIER, switch_on_quantifier);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 120 "qa.l"
RETURN_INSTR(PSEUDO_INSTR0, pseudo_instr0);	
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 121 "qa.l"
RETURN_INSTR(PSEUDO_INSTR1, pseudo_instr1);	
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 122 "qa.l"
RETURN_INSTR(PSEUDO_INSTR2, pseudo_instr2);	
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 123 "qa.l"
RETURN_INSTR(PSEUDO_INSTR3, pseudo_instr3);	
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 124 "qa.l"
RETURN_INSTR(PSEUDO_INSTR4, pseudo_instr4);	
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 125 "qa.l"
RETURN_INSTR(PSEUDO_INSTR5, pseudo_instr5);
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 127 "qa.l"
/* Skip whitespace */
	YY_BREAK
case 96:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 129 "qa.l"
/* Comment: Skip till \n */
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 131 "qa.l"
read_comment();
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 133 "qa.l"
{
                                string* buf = new string;
                                int c = yyinput();

                                while(c != '"')
                                {
                                  if (c == '\\')
                                  {
                                    buf->push_back(c);
                                    c = yyinput();
                                  }
                                  buf->push_back(c);
                                  c = yyinput();
                                }
                                yylval.string_value = buf;
				return STRING_TOKEN;
                        }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 151 "qa.l"
{
                                string* buf = new string;
				const int len = read_atom(*buf, ATOM_LENGTH);
				if (len == -1)
				{
				  Fatal(__FUNCTION__, "bad atom");
				}
				yylval.atom_name = buf;

				return ATOM_TOKEN;
			}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 163 "qa.l"
{
				/* End of predicate tag */
				return END_TOKEN;
			}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 168 "qa.l"
{
				yylval.double_value = atof(yytext);
				return DOUBLE_TOKEN;
			}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 172 "qa.l"
{
				yylval.double_value = atof(yytext);
				return DOUBLE_TOKEN;
			}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 176 "qa.l"
{
				yylval.int_value = atol(yytext);
				return INTEGER_TOKEN;
			}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 181 "qa.l"
{
  				yylval.label_name = new string(yytext);

				return LABEL_TOKEN;
			}
	YY_BREAK
case 105:
#line 188 "qa.l"
case 106:
#line 189 "qa.l"
case 107:
#line 190 "qa.l"
case 108:
#line 191 "qa.l"
case 109:
#line 192 "qa.l"
case 110:
#line 193 "qa.l"
case 111:
#line 194 "qa.l"
case 112:
YY_RULE_SETUP
#line 194 "qa.l"
{
				/* Punctuation */
				return yytext[0];
			}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 199 "qa.l"
{
				/* Unrecognised character */
				fprintf(stderr,
					"Bad character in input %c\n",
					yytext[0]);
			}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 206 "qa.l"
ECHO;
	YY_BREAK
#line 1795 "lexer.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 731 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 731 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 730);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 206 "qa.l"



void read_comment(void)
{
  int c, d;

  c = yyinput();
  
  if (c == EOF)
    {
      Fatal(Program, "unexpected EOF in comment");
    }
  
  d = yyinput();
  
  if (d == EOF)
    {
      Fatal(Program, "unexpected EOF in comment");
    }
  
  while (!(c == '*' && d == '/'))
    {
      c = d;
      
      d = yyinput();
      
      if (d == EOF)
	{
	  Fatal(Program, "unexpected EOF in comment");
	}
    }
}


size_t read_atom(string& buf, const size_t len)
{
  unsigned i = 0;
  bool done = false;

  int c = yyinput();

  while(!done && i < len - 1)
    {
      if(c == '\'')
	{
	  c = yyinput();
	  done = (c != '\'');
	}

      if(!done) {
	if(c == '\n') 
	  {
	    i++;
	    buf.push_back('\n');
	    c = yyinput();
	  }
	else if (c == '\t')
	  {
	    i++;
	    buf.push_back('\t');
	    c = yyinput();
	  }
	else if (c == '\\')
	  {
	    c = yyinput();
	    i++;
	    switch (c)
	      {
	      case 'a':
		buf.push_back('\a');
		c = yyinput();
		break;
	      case 'b':
		buf.push_back('\b');
		c = yyinput();
		break;
	      case 'f':
		buf.push_back('\f');
		c = yyinput();
		break;
	      case 'n':
		buf.push_back('\n');
		c = yyinput();
		break;
	      case 'r':
		buf.push_back('\r');
		c = yyinput();
		break;
	      case 't':
		buf.push_back('\t');
		c = yyinput();
		break;
	      case 'v':
		buf.push_back('\v');
		c = yyinput();
		break;
	      case '\\':
		buf.push_back('\\');
		c = yyinput();
		break;
	      case '\'':
		buf.push_back('\'');
		c = yyinput();
		break;
	      case '\"':
		buf.push_back('\"');
		c = yyinput();
		break;
	      default:
		buf.push_back('\\');
		break;
	      }
	  }
	else			
	  {
	    i++;
	    buf.push_back(c);
	    c = yyinput();
	  }
        }
    }
  
  unput(c);

  if(i > len - 1) 
    {
      FatalS(__FUNCTION__, "atom too long ", buf.c_str());
    }

  return i;
}



